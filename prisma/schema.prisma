generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                 @id @default(autoincrement())
  username             String              @unique
  password             String
  email                String              @unique
  phone                String?
  date_of_birth        DateTime            @db.Date
  gender               Gender?             @default(Male)
  expired_otp          String?
  address              String?             @db.Text
  thumbnail            String?
  description          Json?
  is_edit              Boolean?            @default(false)
  notifications        Notification[]
  warningLetters       WarningLetter[]
  senderWarningLetters WarningLetter[]     @relation("Sender")
  userRoles            UserRole[]
  userInstitutions     UserInstitution[]
  attendances          Attendance[]
  blackLists           BlackList[]
  permissionRequests   PermissionRequest[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

enum Gender {
  Male
  Female
}

model WarningLetter {
  id         Int      @id @default(autoincrement())
  sender_id  Int
  user_id    Int
  title      String
  message    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sender     User     @relation("Sender", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("warning_letters")
}

model Notification {
  id      Int     @id @default(autoincrement())
  user_id Int
  title   String
  message String  @db.Text
  routes  String?
  is_read Boolean
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notifications")
}

model Holiday {
  id             Int         @id @default(autoincrement())
  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  institution_id Int
  event          String
  start_date     DateTime    @db.Date
  end_date       DateTime    @db.Date

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("holidays")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String
  userRoles UserRole[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("roles")
}

model UserRole {
  id      Int  @id @default(autoincrement())
  user_id Int
  role_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role    Role @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_roles")
}

model Institution {
  id               Int               @id @default(autoincrement())
  name             String
  lat              String
  long             String
  phone            String
  email            String
  address          String            @db.Text
  logo             String?
  userInstitutions UserInstitution[]
  operatingHours   OperatingHours[]
  Holiday          Holiday[]
  Attendance       Attendance[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("institutions")
}

model UserInstitution {
  id             Int         @id @default(autoincrement())
  user_id        Int
  institution_id Int
  user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_institutions")
}

model OperatingHours {
  id             Int         @id @default(autoincrement())
  start_time     DateTime
  end_time       DateTime
  status         Boolean
  late_tolerance Int
  institution_id Int
  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("operating_hours")
}

model BlackList {
  id         Int      @id @default(autoincrement())
  user_id    Int
  reason     String   @db.Text
  start_date DateTime
  end_date   DateTime
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("black_lists")
}

model Attendance {
  id             Int         @id @default(autoincrement())
  institution_id Int
  institution    Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id        Int
  check_in       DateTime?
  check_out      DateTime?
  type           String
  images         String?
  lat            String
  long           String
  user           User        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("attendances")
}

enum Status {
  Pending
  Approved
  Revised
  Rejected
}

enum SicknessLeavePermission {
  Sickness
  Leave
  Permission
}

model PermissionRequest {
  id         Int                     @id @default(autoincrement())
  user_id    Int
  title      String
  desc       String                  @db.Text
  type       SicknessLeavePermission
  start_date DateTime                @db.Date
  end_date   DateTime                @db.Date
  file       String?
  reason     String?                 @db.Text
  status     Status                  @default(Pending)
  user       User                    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("permission_requests")
}
